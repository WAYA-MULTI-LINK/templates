name: CI Pipeline

on:
  workflow_call:
    inputs:
      CI_ENVIRONMENT_NAME:
        required: true
        type: string
    secrets:
      DOCKER_USERNAME:
        required: true
      DOCKER_PASSWORD:
        required: true
      ARGOCD_PASSWORD:
        required: true
      ARGOCD_SERVER:
        required: true
      WAYA_HELM_PAT:
        required: true

jobs:
  docker_build:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.vars.outputs.tag }}
      image_repo: ${{ steps.vars.outputs.image_repo }}
      slug: ${{ steps.vars.outputs.slug }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up build variables
        id: vars
        run: |
          REPO_NAME="${{ github.event.repository.name }}"
          BRANCH_NAME="${{ github.ref_name }}"
          SHORT_SHA=$(git rev-parse --short HEAD)
          REPO_SLUG=$(echo "$REPO_NAME" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g')
          REPO_SLUG=${REPO_SLUG#wayagram-}

          TAG="${REPO_NAME}-${BRANCH_NAME}-${SHORT_SHA}"
          IMAGE_REPO="${{ secrets.DOCKER_USERNAME }}/microservice:${TAG}"

          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "image_repo=${IMAGE_REPO}" >> $GITHUB_OUTPUT
          echo "slug=${REPO_SLUG}" >> $GITHUB_OUTPUT

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/microservice:${{ steps.vars.outputs.tag }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/microservice:${{ steps.vars.outputs.tag }}

  helm_update:
    runs-on: ubuntu-latest
    needs: docker_build
    env:
      CI_ENVIRONMENT_NAME: ${{ inputs.CI_ENVIRONMENT_NAME }}
      IMAGE_REPO: ${{ needs.docker_build.outputs.image_repo }}
      REPO_SLUG: ${{ needs.docker_build.outputs.slug }}
      GITHUB_PAT: ${{ secrets.WAYA_HELM_PAT }}

    steps:
      - name: Install yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq

      - name: Clone waya-helm-charts repo
        run: |
          git clone https://kayodewaya:${GITHUB_PAT}@github.com/WAYA-MULTI-LINK/waya-helm-charts.git
          cd waya-helm-charts

          FILE_PATH="./helm/microservices/${REPO_SLUG}/${CI_ENVIRONMENT_NAME}-values.yaml"
          echo "Updating $FILE_PATH with new image.repository"

          if [ -z "${IMAGE_REPO}" ]; then
            echo "IMAGE_REPO is empty. Failing the job."
            exit 1
          fi

          yq e -i ".image.repository = \"${IMAGE_REPO}\"" "$FILE_PATH"

          git config --global user.email "github-actions@github.com"
          git config --global user.name "github-actions"

          git add "$FILE_PATH"
          git commit -m "chore: update image.repository to ${IMAGE_REPO}" || echo "No changes to commit"
          git push origin main

  argocd_sync:
    runs-on: ubuntu-latest
    needs: [helm_update]
    env:
      CI_ENVIRONMENT_NAME: ${{ inputs.CI_ENVIRONMENT_NAME }}
      REPO_SLUG: ${{ needs.docker_build.outputs.slug }}
      ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
      ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }}

    steps:
      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x /usr/local/bin/argocd

      - name: Login to ArgoCD
        run: |
          argocd login $ARGOCD_SERVER --username admin --password $ARGOCD_PASSWORD --grpc-web --insecure

      - name: Sync ArgoCD App
        run: |
          APP_NAME="${REPO_SLUG}-${CI_ENVIRONMENT_NAME}"
          echo "Syncing ArgoCD app: $APP_NAME"
          if ! argocd app get "$APP_NAME" > /dev/null 2>&1; then
            echo "ArgoCD app $APP_NAME does not exist"
            exit 1
          fi
          argocd app sync "$APP_NAME"
