
name: CI Template

on:
  workflow_call:
    secrets:
      DOCKER_USERNAME:
        required: true
      DOCKER_PASSWORD:
        required: true
      GH_PAT:
        required: true
      ARGOCD_SERVER:
        required: true
      ARGO_PASSWORD:
        required: true

env:
  NODE_ENV: test

jobs:
  docker_build:
    runs-on: ubuntu-latest
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      CI_ENVIRONMENT_NAME: ${{ github.ref_name }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up build variables
        id: vars
        run: |
          # Set variables using same naming convention
          REPO_NAME="${{ github.event.repository.name }}"
          BRANCH_NAME="${{ github.ref_name }}"
          FULL_IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/microservice"
          SHORT_SHA=$(git rev-parse --short HEAD)
          TAG="${REPO_NAME}-${BRANCH_NAME}-${SHORT_SHA}"

          # Export variables for later steps
          echo "REPO_NAME=${REPO_NAME}" >> $GITHUB_ENV
          echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV
          echo "FULL_IMAGE_NAME=${FULL_IMAGE_NAME}" >> $GITHUB_ENV
          echo "TAG=${TAG}" >> $GITHUB_ENV

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.FULL_IMAGE_NAME }}:${{ env.TAG }}
            ${{ env.FULL_IMAGE_NAME }}:${{ env.REPO_NAME }}-${{ env.BRANCH_NAME }}-latest
          cache-from: type=registry,ref=${{ env.FULL_IMAGE_NAME }}:cache
          cache-to: type=registry,ref=${{ env.FULL_IMAGE_NAME }}:cache,mode=max
          build-args: |
            BRANCH_NAME=${{ env.BRANCH_NAME }}

  helm_update:
    runs-on: ubuntu-latest
    needs: docker_build
    steps:
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git yq

      - name: Clone Helm charts repository
        run: git clone https://${{ secrets.GH_PAT }}@github.com/WAYA-MULTI-LINK/waya-helm-charts.git

      - name: Update values file
        run: |
          cd waya-helm-charts
          git checkout main
          git pull origin main
          echo "${{ env.CI_ENVIRONMENT_NAME }}" ${{ env.CI_ENVIRONMENT_NAME }}

          FILE_PATH="./microservices/${{ github.event.repository.name }}/${{ env.CI_ENVIRONMENT_NAME }}-values.yaml"
          REPO_NAME="${{ github.event.repository.name }}"
          BRANCH_NAME="${{ github.ref_name }}"
          TAG="${REPO_NAME}-${BRANCH_NAME}-${{ github.sha }}"
          IMAGE_REPO="${{ secrets.DOCKER_USERNAME }}/microservice"

          if [ -f "$FILE_PATH" ]; then
            yq e -i ".application.image.repository = \"${IMAGE_REPO}:${TAG}\"" "$FILE_PATH"
            git config --global user.name "CI Bot"
            git config --global user.email "ci-bot@alerzo.com"
            git add "$FILE_PATH"
            git commit -m "Update Docker image tag to ${IMAGE_REPO}:${TAG}"
            git push https://${{ secrets.GH_PAT }}@github.com/WAYA-MULTI-LINK/waya-helm-charts.git HEAD:main
          else
            echo "File does not exist: $FILE_PATH"
            exit 1
          fi

  argocd_sync:
    runs-on: ubuntu-latest
    needs: helm_update
    steps:
      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd
          sudo mv argocd /usr/local/bin/

      - name: Login to ArgoCD
        env:
          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
          ARGOCD_USERNAME: admin
          ARGOCD_PASSWORD: ${{ secrets.ARGO_PASSWORD }}
        run: |
          argocd login "$ARGOCD_SERVER" \
            --username "$ARGOCD_USERNAME" \
            --password "$ARGOCD_PASSWORD" \
            --grpc-web --insecure

      - name: Sync application
        run: |
          TARGET_APP="${{ github.event.repository.name }}-${{ env.CI_ENVIRONMENT_NAME }}"
          argocd app sync "$TARGET_APP" \
            --server="${{ secrets.ARGOCD_SERVER }}" \
            --grpc-web --insecure
