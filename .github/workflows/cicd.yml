name: CI Pipeline

on:
  workflow_call:
    inputs:
      CI_ENVIRONMENT_NAME:
        required: true
        type: string
    secrets:
      DOCKER_USERNAME:
        required: true
      DOCKER_PASSWORD:
        required: true
      ARGOCD_PASSWORD:
        required: true
      ARGOCD_SERVER:
        required: true
      WAYA_HELM_PAT:
        required: true
      

jobs:
  docker_build:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.vars.outputs.tag }}
      image_repo: ${{ steps.vars.outputs.image_repo }}
      slug: ${{ steps.vars.outputs.slug }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up build variables
        id: vars
        run: |
          REPO_NAME="${{ github.event.repository.name }}"
          BRANCH_NAME="${{ github.ref_name }}"
          FULL_IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/microservice"
          SHORT_SHA=$(git rev-parse --short HEAD)
          TAG="${REPO_NAME}-${BRANCH_NAME}-${SHORT_SHA}"

          REPO_SLUG=$(echo "$REPO_NAME" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g')

          # Remove leading "wayagram-" prefix if present
          REPO_SLUG=${REPO_SLUG#wayagram-}

          echo "REPO_NAME=${REPO_NAME}" >> $GITHUB_ENV
          echo "REPO_SLUG=${REPO_SLUG}" >> $GITHUB_ENV
          echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV
          echo "FULL_IMAGE_NAME=${FULL_IMAGE_NAME}" >> $GITHUB_ENV
          echo "TAG=${TAG}" >> $GITHUB_ENV

          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "image_repo=${FULL_IMAGE_NAME}" >> $GITHUB_OUTPUT
          echo "slug=${REPO_SLUG}" >> $GITHUB_OUTPUT

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and push Docker image
        run: |
          docker build -t ${{ env.FULL_IMAGE_NAME }}:${{ env.TAG }} .
          docker push ${{ env.FULL_IMAGE_NAME }}:${{ env.TAG }}

  helm_update:
    runs-on: ubuntu-latest
    needs: docker_build
    env:
      CI_ENVIRONMENT_NAME: ${{ inputs.CI_ENVIRONMENT_NAME }}
      IMAGE_TAG: ${{ needs.docker_build.outputs.tag }}
      IMAGE_REPO: ${{ needs.docker_build.outputs.image_repo }}
      REPO_SLUG: ${{ needs.docker_build.outputs.slug }}
      GITHUB_PAT: ${{ secrets.WAYA_HELM_PAT }}
    steps:
      - name: Checkout this repo (optional)
        uses: actions/checkout@v3

      - name: Clone waya-helm-charts repo
        run: |
          git clone https://kayodewaya:${GITHUB_PAT}@github.com/WAYA-MULTI-LINK/waya-helm-charts.git
          cd waya-helm-charts

          FILE_PATH="./helm/microservices/${REPO_SLUG}/${CI_ENVIRONMENT_NAME}-values.yaml"
          echo "Updating $FILE_PATH with new image tag"
          
          yq e -i ".image.repository = \"${IMAGE_REPO}\"" "$FILE_PATH"
          yq e -i ".image.tag = \"${IMAGE_TAG}\"" "$FILE_PATH"

          git config --global user.email "github-actions@github.com"
          git config --global user.name "github-actions"

          git add "$FILE_PATH"
          git commit -m "chore: update image tag to ${IMAGE_TAG}" || echo "No changes to commit"
          git push origin main


  argocd_sync:
    runs-on: ubuntu-latest
    needs: helm_update
    # env:
    #   CI_ENVIRONMENT_NAME: ${{ inputs.CI_ENVIRONMENT_NAME }}
    #   REPO_SLUG: ${{ needs.docker_build.outputs.slug }}
    #   ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
    #   ARGOCD_USERNAME: ${{ secrets.ARGOCD_USERNAME }}
    #   ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }}
    env:
      CI_ENVIRONMENT_NAME: ${{ inputs.CI_ENVIRONMENT_NAME }}
      REPO_SLUG: ${{ needs.docker_build.outputs.slug }}

    steps:
      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x /usr/local/bin/argocd

      - name: Login to ArgoCD
        run: argocd login argocd.dev.wayalinks.com --username admin --password WqUNi85pNUJ43A3q --grpc-web --insecure 

      - name: Check if ArgoCD app exists
        run: |
          TARGET_APP="${REPO_SLUG}-${CI_ENVIRONMENT_NAME}"
          echo "Checking ArgoCD app: $TARGET_APP"
          if ! argocd app get "$TARGET_APP" > /dev/null 2>&1; then
            echo "ERROR: ArgoCD app $TARGET_APP does not exist"
            exit 1
          fi


#  argocd_sync:
#     runs-on: ubuntu-latest
#     needs: docker_build
#     env:
#       CI_ENVIRONMENT_NAME: ${{ inputs.CI_ENVIRONMENT_NAME }}
#       REPO_SLUG: ${{ needs.docker_build.outputs.slug }}

#     steps:
#       - name: Sync ArgoCD app
#         run: |
#           TARGET_APP="${REPO_SLUG}-${CI_ENVIRONMENT_NAME}"
#           echo "Syncing $TARGET_APP"
#           argocd app sync "$TARGET_APP" \
#             --auth-token ${{ secrets.ARGOCD_AUTH_TOKEN }} \
#             --server ${{ secrets.ARGOCD_SERVER }} \
#             --insecure
